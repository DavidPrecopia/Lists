apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "de.mannodermaus.android-junit5"

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// enables LayoutContainer
androidExtensions {
    experimental = true
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.precopia.david.lists"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        // This ensures that ProGuard removes un-supported language resources.
        // https://developer.android.com/studio/build/shrink-code#unused-alt-resources
        resConfig rootProject.resConfigs
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "Lists-v${rootProject.versionName}")
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            ext.enableCrashlytics = true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
            // Disables Crashlytics
            ext.enableCrashlytics = false
        }
    }
    testOptions {
        unitTests.all {
            // Always run tests, even when nothing changed.
            dependsOn 'clean'
            // Always show the result of every unit test, even if it passes.
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }
}

dependencies {
    implementation project(':domain')
    implementation project(':data')

    implementation "androidx.core:core-ktx:$rootProject.rootProject.coreKtxVersion"

    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "androidx.activity:activity-ktx:$rootProject.activityVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"

    implementation ("com.google.android.material:material:$rootProject.materialDesignVersion") {
        because "v1.1.0 has unwanted behavior regarding its choice of color in night mode and buttons."
    }
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"

    // Navigation
    implementation "androidx.navigation:navigation-runtime-ktx:$rootProject.navVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navVersion"

    // Swipe Reveal Layout
    implementation "com.chauthai.swipereveallayout:swipe-reveal-layout:$rootProject.swipeRevealVersion"

    // Firebase Crashlytics
    releaseImplementation "com.google.firebase:firebase-crashlytics:$rootProject.crashlyticsVersion"

    // RxJava
    implementation "io.reactivex.rxjava3:rxandroid:$rootProject.rxAndroidVersion"
    implementation "io.reactivex.rxjava3:rxjava:$rootProject.rxJavaVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"

    // Timber
    debugImplementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    // Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"

    // Local testing
    testImplementation "org.junit.jupiter:junit-jupiter-api:$rootProject.junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$rootProject.junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$rootProject.junitVersion"
    testImplementation "io.mockk:mockk:$rootProject.mockkVersion"
    testImplementation "org.assertj:assertj-core:$rootProject.assertjVersion"

    // Instrumentation testing
    androidTestImplementation "androidx.test.ext:junit:$rootProject.androidXJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoCoreVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.androidXTestRulesVersion"
    androidTestImplementation "org.assertj:assertj-core:$rootProject.assertjVersion"
}

apply plugin: 'com.google.gms.google-services'
